
#user  nobody;

# key-value pairs are known as directives
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


# carly-brace blocks are known as context, inside context we have directives
events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   /data/data/com.termux/files/usr/share/nginx/html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /data/data/com.termux/files/usr/share/nginx/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}




# my custom context implementation

#http {
#    types {
#        mime types are values of the "Content-Type" http header
#        file-type           file-extension
#        text/css            css;
#    }
#    or use include directive to attach the mime file
#    include mime.types
#    server {
#        listen 8081;
#        root /data/data/com.termux/files/home;
#    }

    # location directive
#    location /route1 {
#        root /path/to/file;
#    }

#    location /route2 {
#        alias /path/to/a/root;
#        try_files /vegetables/veggies.html /index.html =404;
#    }
#    location /* denotes regex*/ ~* /route3/[0-9] {
#        root /path/to/file;
#        try_files /ii.html =404;
#    }
#    redirects
#    location /tty {
#        return /*HTTP status code*/ 307 /route/to/redirect
#    }
#    rewrites
#    rewrite /*regex*/ ^/number/(\w+) /count/$1;
#    load_balancing -> upstream context + location context
#    upstream upstream_name {
#        server ip:port;
#        server ip:port;
#        server ip:port;
#        server ip:port;
#    }
#    location / {
#        proxy_pass http://upstream_name/;
#    }
#}

#events {
#}
